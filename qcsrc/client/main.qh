
// --------------------------------------------------------------------------
// MENU Functionality

#define DATABUF_PING 0
#define DATABUF_CAPTURES (1*maxclients)
#define DATABUF_DEATHS (2*maxclients)
#define DATABUF_RETURNS (3*maxclients)

#define DATABUF_NEXT (5*maxclients)

// --------------------------------------------------------------------------
// Onslaught

// Map coordinate base calculations need these
vector mi_center;
vector mi_scale;
// Minimap
string minimapname;
float ons_showmap;

// --------------------------------------------------------------------------
// General stuff

float drawfont;
float postinit;
float gametype;

//float sorted_players;
//float sorted_teams;

// Defs
//.float ctf_state;
//.float health;

// Constants
const float COLOR_TEAM_RED = 64;
const float COLOR_TEAM_BLUE = 208;

const float COLOR_TEAM1       = 4;  // red
const float COLOR_TEAM2       = 13; // blue
const float COLOR_TEAM3       = 12; // yellow
const float COLOR_TEAM4       = 9; // pink
const float COLOR_SPECTATOR = 1337;

#define FONT_DEFAULT 0
#define FONT_USER 8

// --------------------------------------------------------------------------
// Scoreboard stuff

#define MAX_SBAR_FIELDS 32

#define SP_END -1

#define SP_PING -2
#define SP_NAME -3
#define SP_KDRATIO -4
#define SP_DPM -5
#define SP_PL -6
#define SP_FRAGS -7
#define SP_LAG -8

#define SP_SEPARATOR -100

float sbar_field[MAX_SBAR_FIELDS + 1];
float sbar_size[MAX_SBAR_FIELDS + 1];
string sbar_title[MAX_SBAR_FIELDS + 1];
float sbar_num_fields;

float sbar_font;
float sbar_bigfont;
float sbar_rmbigfont;

string scores_label[MAX_SCORE];
float scores_flags[MAX_SCORE];
string teamscores_label[MAX_SCORE];
float teamscores_flags[MAX_SCORE];
.float scores[MAX_SCORE];
.float teamscores[MAX_TEAMSCORE];
.float hasbestscore;

#define IS_INCREASING(x) ( (x)&SFL_LOWER_IS_BETTER )
#define IS_DECREASING(x) ( !((x)&SFL_LOWER_IS_BETTER) )


vector sbar_fontsize;
vector sbar_fontsize_spec;

//float csqc_flags;

entity playerslots[RM_MAXCLIENTS];
entity teamslots[17];    // 17 teams (including "spectator team")
.float gotscores;
.entity owner;
.float ready;

.void(void) draw;
.void(void) draw2d;
.void(void) entremove;
float drawframetime;
vector view_origin, view_angles, view_forward, view_right, view_up;

float button_zoom;
float spectatorbutton_zoom;
float button_attack2;
float activeweapon;
float current_viewzoom;
float zoomin_effect;
float ignore_plus_zoom;
float ignore_minus_zoom;
float warmup_stage;

float weaponimpulse[24];
string getcommandkey(string text, string command);
float sbar_showbinds;
float sbar_showbinds_limit;

string vote_called_vote;
float ready_waiting;
float ready_waiting_for_me;
float vote_waiting;
float vote_waiting_for_me;

float previous_game_starttime;
entity restartAnnouncer; //a temporary entity which will play the countdown sounds 3, 2, 1 for the client
void restartAnnouncer_Think();

float current_zoomfraction;

float cs_project_is_b0rked;
float vid_width, vid_height, vid_pixelheight;

float camera_active;		// Demo camera is active if set to TRUE
float chase_active_backup;
float camera_roll;
vector camera_direction;

void centerprint(string strMessage);

#define ALPHA_MIN_VISIBLE 0.003

float armorblockpercent;

//hooks
float calledhooks;
#define HOOK_START    1
#define HOOK_END      2

string rm_watermark;

string bigprint_string;
string bigprint_comment;
float bigprint_fadetime;
float bigprint_appeartime;
string bigprint_oldstring;
float bigprint_oldfadetime;
float bigprint_commentfadetime;
float bigprint_commentappeartime;
float bigprint_oldappeartime;

void bigprint(string, string, float);

float centerprint_init;

#define MAX_SPECTATORS 7
//string spectatornames[MAX_SPECTATORS];
float spectatorlist[MAX_SPECTATORS];
float num_spectators;

float rm_showspec;
float rm_showdamage;
float rm_teamlasers;
float rm_helptime;
float rm_nobigtext;
float rm_hidebigcomments;
float rm_legacyvote;
float rm_hidewatermark;
float rm_madoka;
float rm_crosshealth;
float rm_simpleeffects;
float rm_shownames;
float rm_shownames_teamonly;
float rm_visualscore;
float rm_oldhud_option;
float rm_althud_option;
float rm_noflags;
float rm_showrankings;
float rm_showtimer;
float rm_shownadgetregen;

float rm_oldhud;
float rm_althud;
float rm_oldflags;
float rm_oldbigfont;

float vote_yescount;
float vote_nocount;
float vote_needed;
float vote_active;
float vote_highlighted;
float vote_invite;

float is_tmpmadoka;
float tmpmadoka_fadetime;

float madoka_locked;
float madokalockstate;

float mr_appeartime;
float mr_fadetime;
float morningrescue;

float sbar_madokafont;

#define MDKF_SET 1
#define MDKF_UNSET 0
#define MDKF_AUTO -1
#define sbar_bigfont_real FONT_USER+2

void SetMadokaFont(float);

float bp_draw;
float bpc_draw;
float obp_draw;

float gametypevote;
float gametypevote_longest;

string mapvote_choosenmap;
string mapvote_choosenmappic;

void score_visual(float);

#define MAX_SCORESTRINGS 10
string score_strings[MAX_SCORESTRINGS];
float score_strings_fadeout[MAX_SCORESTRINGS];
float score_strings_appear[MAX_SCORESTRINGS];
float score_strings_alphamod[MAX_SCORESTRINGS];
vector score_strings_color[MAX_SCORESTRINGS];
float score_strings_num;
#define SCORECOLOR_MAXSCORE 100

vector hudflash_color;
float hudflash_appeartime;
float hudflash_fadetime;
float hudflash_intensivity;
float hudflash_alpha;
float hudflash_enabled;
void hudflash(vector color, float staytime, float intensivity, float alph);

float hudlocked;
float hudlock_old;
float hudlock_alt;

#define hudlocked_old hudlock_old
#define hudlocked_alt hudlock_alt

float screenfade;

float fovlock;
float speczoom_speed;
float speczoom_factor;

float g_minstagib;
float minstasbar_fixed;
float gui_reloading;

float rm_hidecountry;

vector camera_origin;
float camera_expiretime;
float camera_drawviewmodel_locked;
float camera_drawviewmodel_backup;

float cl_fps;

.float avg_ping;
.float avg_ping_next;

float sv_hostname_colored;
string sv_hostname;
string sv_rm_build_info;
string sv_rm_build_date;
string sv_motd;

float sv_showspecs_extra;
float sv_scoreboard_fps_column;
float sv_scoreboard_noob_column;
float sv_scoreboard_alive_column;

float g_nadgets;
float g_nadgets_double;
float sv_scoreboard_heal_column;
float g_weaponarena;
float g_weaponarena_secondary;
float g_freeze;

float Q3SURFACEFLAG_SLICK = 2; // low friction surface
float DPCONTENTS_SOLID = 1; // blocks player movement
float DPCONTENTS_BODY = 32; // blocks player movement
float DPCONTENTS_CORPSE = 64; // blocks player movement
float DPCONTENTS_PLAYERCLIP = 256; // blocks player movement

.vector oldorigin;
.vector iorigin;

float whatsgoingon;

entity dtrack_total;
entity dtrack_taken;
entity dtrack_total_spec;
entity dtrack_taken_spec;
entity dtrack_global;

float sv_damagestats;

float GetBigfont();
void cvar_clientsettemp(string cv, string val);

float sbar_selectedplayer;
float sbar_selectedplayer_alpha;
float sbar_selectedplayer_fadetime;
string sbar_selectedplayer_name;

.float healthvalue;
.float armorvalue;

#define ID_ME (if(spectatee_status > 0) spectatee_status else player_localentnum)

// Needed to know if we should zoom on nex secondary or not
float g_balance_nex_secondary;
float fps_friendly;

float mouse_enabled;
vector mouse_pos;

float ext_DP_CSQC_QUERYRENDERENTITY;
