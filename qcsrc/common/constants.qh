
const AS_STRING = 1;
const AS_INT = 2;
const AS_FLOAT_TRUNCATED = 2;
const AS_FLOAT = 8;

///////////////////////////
// csqc communication stuff

enum {
    ENT_CLIENT,
    ENT_CLIENT_DEAD,
    ENT_CLIENT_ENTCS,
    ENT_CLIENT_SCORES_INFO,
    ENT_CLIENT_SCORES,
    ENT_CLIENT_TEAMSCORES,
    ENT_CLIENT_POINTPARTICLES,
    ENT_CLIENT_RAINSNOW,
    ENT_CLIENT_LASER,
    ENT_CLIENT_NAGGER,
    ENT_CLIENT_WAYPOINT,
    ENT_CLIENT_RADARLINK,
    ENT_CLIENT_PROJECTILE,
    ENT_CLIENT_GIBSPLASH,
    ENT_CLIENT_DAMAGEINFO,
    ENT_CLIENT_CASING,
    ENT_CLIENT_INIT,
    ENT_CLIENT_MAPVOTE,
    ENT_CLIENT_CLIENTDATA,
    ENT_CLIENT_RANDOMSEED,
    ENT_CLIENT_WALL,
    ENT_CLIENT_ZAPPER_SHIELD,
    ENT_CLIENT_MODELEFFECT,
    ENT_CLIENT_ZAPPER,
    ENT_CLIENT_BUFFMODEL,
    ENT_CLIENT_TURRET,
    ENT_CLIENT_WARPZONE,
    ENT_CLIENT_WARPZONE_CAMERA,
    ENT_CLIENT_WARPZONE_TELEPORTED,
    ENT_CLIENT_SPECINFO,
    ENT_CLIENT_ACCSTATS,
    ENT_CLIENT_HGTWARP_INDICATOR,
    _ENT_END,
};

const _ENT_START = ENT_CLIENT;

enum {
    TE_CSQC_PICTURE = 100,
    TE_CSQC_RACE,
    TE_CSQC_SPAWN,
    TE_CSQC_ZCURVEPARTICLES,
    TE_CSQC_NEXGUNBEAMPARTICLE,
    TE_CSQC_LIGHTNINGARC,
    TE_CSQC_BIGPRINT,
    TE_CSQC_VOTE,
    TE_CSQC_VOTERESET,
    TE_CSQC_MADOKAPRINT,
    TE_CSQC_MORNINGRESCUE,
    TE_CSQC_CLEARBIGPRINT,
    TE_CSQC_SERVERINFO,
    TE_CSQC_HUDFLASH,
    TE_CSQC_HUDFLASH_TEAMCOLOR,
    TE_CSQC_NADGETSELECT,
    TE_CSQC_SECONDARYSELECT,
    TE_CSQC_CAMERA,
    TE_CSQC_VISUALDAMAGE,
    TE_CSQC_HEAL,
    TE_CSQC_BLAST,
    TE_CSQC_DTRACK,
    TE_CSQC_MEODP,
    TE_CSQC_RADIO,
    TE_CSQC_ZAPPERLIGHTNING,
    TE_CSQC_UPDATESELECTEDPLAYER,
    TE_CSQC_MESSAGE,
    TE_CSQC_VOTEINVITE,
    TE_CSQC_ELEBLAST,
    _TE_CSQC_END,
};

const _TE_CSQC_START = TE_CSQC_PICTURE;

enumflags {
    SPECINFO_LIST,
    SPECINFO_HUD,
};

enum {
    STAT_KH_KEYS = 32,
    STAT_WEAPONS,
    STAT_AKIMBO_WEAPONS,
    STAT_SWITCHWEAPON,
    STAT_GAMESTARTTIME,
    STAT_STRENGTH_FINISHED,
    STAT_INVINCIBLE_FINISHED,
    STAT_PRESSED_KEYS,
    STAT_ALLOW_OLDNEXBEAM,
    STAT_FUEL,
    STAT_NB_METERSTART,
    STAT_SHOTORG,
    STAT_SHOTORG_VISUAL,
    STAT_LEADLIMIT,
    STAT_CLIP_LOADED,
    STAT_CLIP_LIMIT,
    STAT_ROUNDSTATE,
    STAT_ZAPPER_HEAT,
    STAT_FROZEN,
    STAT_REVIVE_PROGRESS,
    STAT_REDALIVE,
    STAT_BLUEALIVE,
    STAT_YELLOWALIVE,
    STAT_PINKALIVE,
    STAT_TOTALPOINTS,
    STAT_REDPOINTS,
    STAT_BLUEPOINTS,
    STAT_MINSTA,
    STAT_SM_HASGEM,
    STAT_CAPTURE_PROGRESS,
    STAT_PRISONED,
    STAT_ROUNDLOST,
    STAT_JBMSG,
    STAT_BUFFS,
    STAT_TERM_AUTH,
    STAT_DMGINCOMING,
    STAT_HEALINCOMING,
    STAT_STEALTH,
    STAT_STEALTH_SAVED,
    STAT_INNERRING_CYCLE,
    STAT_INNERRING_FULLTIME,
    STAT_AIMSPREAD,
    STAT_AIMSPREAD2,

    STAT_HGTYPE,
    STAT_HGAMMO,
    STAT_HGREFIRE,
    STAT_HGREGEN,
    STAT_HGREGENMAX,
    STAT_HGREGENPAUSED,
    STAT_HGREGENRATE,

    STAT_HGTYPE2,
    STAT_HGAMMO2,
    STAT_HGREFIRE2,
    STAT_HGREGEN2,
    STAT_HGREGENMAX2,
    STAT_HGREGENPAUSED2,
    STAT_HGREGENRATE2,

    STAT_HGBONUS,
    STAT_HGBONUSTYPE,
    STAT_HGDETONABLES,
    STAT_HGFORCE,
    STAT_HGLAUNCH,

    STAT_HGSHIELDSTORE,
    STAT_HGSHIELDSTOREMAX,
    STAT_HGSHIELD,
    STAT_HGSHIELDPOWER,
    STAT_HGSHIELDDAMAGEPERSHOT,

    STAT_HGSENTRYCAPTURE,

    STAT_HGTWARP_EXPIRETIME,
    STAT_HGTWARP_WARPTIME,

    STAT_WEP_SECONDARY,
    STAT_WEP_PICKUP_CONFIRMATION,
};

enum {
    PROJECTILE_ELECTRO = 1,
    PROJECTILE_ROCKET,
    PROJECTILE_BULLET,
    PROJECTILE_CRYLINK,
    PROJECTILE_ELECTRO_BEAM,
    PROJECTILE_GRENADE,
    PROJECTILE_GRENADE_BOUNCING,
    PROJECTILE_LASER,
    PROJECTILE_HLAC,
    PROJECTILE_PORTO_RED,
    PROJECTILE_PORTO_BLUE,
    PROJECTILE_HOOKBOMB,
    PROJECTILE_HAGAR,
    PROJECTILE_HAGAR_BOUNCING,
    PROJECTILE_BULLET_GLOWING,
    PROJECTILE_CRYLINK_BOUNCING,
    PROJECTILE_FIREBALL,
    PROJECTILE_FIREMINE,
    PROJECTILE_FLAK,
    PROJECTILE_FLAK_BOMB,
    PROJECTILE_PRYAXE,

    PROJECTILE_RM_LASER_RED,
    PROJECTILE_RM_LASER_BLUE,
    PROJECTILE_RM_LASER_YELLOW,
    PROJECTILE_RM_LASER_PINK,

    PROJECTILE_HG_GENERIC,
    PROJECTILE_HG_NAPALM,
    PROJECTILE_HG_PLASMA,
    PROJECTILE_HG_TRANSLOC,
    PROJECTILE_HG_REMOTE,
    PROJECTILE_HG_LASER,
    PROJECTILE_HG_PLASMA_SHARD,
    PROJECTILE_HG_RAZE,
    PROJECTILE_HG_NAPALMSHARD,

    PROJECTILE_HEAL_PARTICLE_EMITTER,
};

enum {
    ROUNDSTATE_GAMEINIT,
    ROUNDSTATE_PREGAME,
    ROUNDSTATE_GAME,
    ROUNDSTATE_OVER,
    ROUNDSTATE_WARMUP,
    ROUNDSTATE_INITIAL_WARMUP,
};

enum {
    JBMSG_NONE,
    JBMSG_CAPPINGNEUTRAL,
    JBMSG_ALLALIVE,
    JBMSG_NOTREADY,
    JBMSG_WRONGTEAM,
    JBMSG_TOOLATE,
};

enum {
    CSQCMSG_OBITUARY,
    CSQCMSG_OBITUARY_CUSTOM,
    CSQCMSG_PRAISE,
};

enumflags {
    CSQCMSG_PRAISEFLAG_HEADSHOT,
    CSQCMSG_PRAISEFLAG_AWESOME,
    CSQCMSG_PRAISEFLAG_IMPRESSIVE,
    CSQCMSG_PRAISEFLAG_AMAZING,
    CSQCMSG_PRAISEFLAG_AIRSHOT,
};

enumflags {
    VDMG_TYPE_HIT,
    VDMG_TYPE_CRIT,
    VDMG_TYPE_HEAL,
    VDMG_TYPE_TEAMHIT,
    VDMG_TYPE_TOSELF,
    VDMG_TYPE_NOTPLAYERTARGET,
    VDMG_TYPE_LETHAL,
    VDMG_TYPE_ALIEN,

    //_VDMG_TYPE_NOCLIENT_BEGIN

    VDMG_TYPE_FORCECHECKLOS,
};

const _VDMG_TYPE_NOCLIENT_BEGIN = VDMG_TYPE_FORCECHECKLOS;
const VDMG_TYPE_CLIENTMASK = _VDMG_TYPE_NOCLIENT_BEGIN - 1;

enum {
     RACE_NET_CHECKPOINT_HIT_QUALIFYING, // byte checkpoint, short time, short recordtime, string recordholder
     RACE_NET_CHECKPOINT_CLEAR,
     RACE_NET_CHECKPOINT_NEXT_QUALIFYING, // byte nextcheckpoint, short recordtime, string recordholder
     RACE_NET_CHECKPOINT_HIT_RACE, // byte checkpoint, short delta, byte lapsdelta, string opponent
     RACE_NET_CHECKPOINT_HIT_RACE_BY_OPPONENT, // byte checkpoint, short delta, byte lapsdelta, string opponent
     RACE_NET_CHECKPOINT_NEXT_SPEC_QUALIFYING, // byte nextcheckpoint, const laptime, short recordtime, string recordholder
     RACE_NET_PENALTY_RACE, // byte penaltytime, string reason
     RACE_NET_PENALTY_QUALIFYING, // byte penaltytime, string reason
};

enum {
    SPRITERULE_DEFAULT,
    SPRITERULE_TEAMPLAY,
};

// gametype vote
enum {
    GTV_AVAILABLE,
    GTV_OVERPLAYED,
    GTV_FORBIDDEN,    
};

const RADARICON_FLAG = 1;
const RADARICON_FLAGCARRIER = 1;
const RADARICON_HERE = 1; // TODO make these 3 and 4, and make images for them
const RADARICON_DANGER = 1;
const RADARICON_WAYPOINT = 1;
const RADARICON_HELPME = 1;
const RADARICON_CONTROLPOINT = 1;
const RADARICON_GENERATOR = 1;
const RADARICON_OBJECTIVE = 1;
const RADARICON_DOMPOINT = 1;
const RADARICON_POWERUP = 1;

const MAPVOTE_COUNT = 24;

///////////////////////////
// key constants

//
// these are the key numbers that should be passed to Key_Event
//
const K_TAB = 9;
const K_ENTER = 13;
const K_ESCAPE = 27;
const K_SPACE = 32;

// normal keys should be passed as lowercased ascii

const K_BACKSPACE = 127;
const K_UPARROW = 128;
const K_DOWNARROW = 129;
const K_LEFTARROW = 130;
const K_RIGHTARROW = 131;

const K_ALT = 132;
const K_CTRL = 133;
const K_SHIFT = 134;
const K_F1 = 135;
const K_F2 = 136;
const K_F3 = 137;
const K_F4 = 138;
const K_F5 = 139;
const K_F6 = 140;
const K_F7 = 141;
const K_F8 = 142;
const K_F9 = 143;
const K_F10 = 144;
const K_F11 = 145;
const K_F12 = 146;
const K_INS = 147;
const K_DEL = 148;
const K_PGDN = 149;
const K_PGUP = 150;
const K_HOME = 151;
const K_END = 152;

const K_KP_HOME = 160;
const K_KP_UPARROW = 161;
const K_KP_PGUP = 162;
const K_KP_LEFTARROW = 163;
const K_KP_5 = 164;
const K_KP_RIGHTARROW = 165;
const K_KP_END = 166;
const K_KP_DOWNARROW = 167;
const K_KP_PGDN = 168;
const K_KP_ENTER = 169;
const K_KP_INS    = 170;
const K_KP_DEL = 171;
const K_KP_SLASH = 172;
const K_KP_MINUS = 173;
const K_KP_PLUS = 174;

const K_PAUSE = 255;

//
// joystick buttons
//
const K_JOY1 = 768;
const K_JOY2 = 769;
const K_JOY3 = 770;
const K_JOY4 = 771;

//
// aux keys are for multi-buttoned joysticks to generate so they can use
// the normal binding process
//
const K_AUX1 = 772;
const K_AUX2 = 773;
const K_AUX3 = 774;
const K_AUX4 = 775;
const K_AUX5 = 776;
const K_AUX6 = 777;
const K_AUX7 = 778;
const K_AUX8 = 779;
const K_AUX9 = 780;
const K_AUX10 = 781;
const K_AUX11 = 782;
const K_AUX12 = 783;
const K_AUX13 = 784;
const K_AUX14 = 785;
const K_AUX15 = 786;
const K_AUX16 = 787;
const K_AUX17 = 788;
const K_AUX18 = 789;
const K_AUX19 = 790;
const K_AUX20 = 791;
const K_AUX21 = 792;
const K_AUX22 = 793;
const K_AUX23 = 794;
const K_AUX24 = 795;
const K_AUX25 = 796;
const K_AUX26 = 797;
const K_AUX27 = 798;
const K_AUX28 = 799;
const K_AUX29 = 800;
const K_AUX30 = 801;
const K_AUX31 = 802;
const K_AUX32 = 803;

//
// mouse buttons generate virtual keys
//
const K_MOUSE1 = 512;
const K_MOUSE2 = 513;
const K_MOUSE3 = 514;
const K_MWHEELUP = 515;
const K_MWHEELDOWN = 516;
const K_MOUSE4 = 517;
const K_MOUSE5 = 518;
const K_MOUSE6 = 519;
const K_MOUSE7 = 520;
const K_MOUSE8 = 521;
const K_MOUSE9 = 522;
const K_MOUSE10 = 523;
const K_MOUSE11 = 524;
const K_MOUSE12 = 525;
const K_MOUSE13 = 526;
const K_MOUSE14 = 527;
const K_MOUSE15 = 528;
const K_MOUSE16 = 529;

///////////////////////////
// keys pressed
const KEY_FORWARD = 1;
const KEY_BACKWARD = 2;
const KEY_LEFT = 4;
const KEY_RIGHT = 8;
const KEY_JUMP = 16;
const KEY_CROUCH = 32;

///////////////////////////
// cvar constants

const CVAR_SAVE  = 1;
const CVAR_NOTIFY  = 2;
const CVAR_READONLY = 4;

///////////////////////////
// scoreboard constants

enumflags {
    SFL_LOWER_IS_BETTER,
    SFL_HIDE_ZERO,
    SFL_ALLOW_HIDE,
    SFL_RANK,
    SFL_TIME,
    SFL_ZERO_IS_WORST,
    SFL_SORT_PRIO_PRIMARY,
    SFL_SORT_PRIO_SECONDARY,
};

const SFL_SORT_PRIO_MASK = SFL_SORT_PRIO_PRIMARY | SFL_SORT_PRIO_SECONDARY;

// this needs to be a precompiler constant
#define MAX_SCORE 24

const MAX_TEAMSCORE = 2;
const ST_SCORE = 0;

enum {
    SP_KILLS,
    SP_DEATHS,
    SP_SUICIDES,
    SP_SCORE,

    SP_CARRYING = 9,
    SP_HOOKFRAGS,
    SP_FLAGS,
    SP_PLAYTIME,
    SP_COUNTRY,
    SP_ACCURACY,
    SP_FPS,
    SP_STATUSICONS,
    SP_NADEFRAGS,
    SP_REVIVALS,
    SP_DAMAGE,
    SP_HEALING,
    SP_QUEUE,
    SP_NOOB,
    SP_ALIVE,

    // game mode specific indices are not in common/, but in server/scores_rules.qc!
};

enumflags {
    SPFLAG_FROZEN,
    SPFLAG_MADOKA,
    SPFLAG_AWAY,
    SPFLAG_MUTE,
};

#define SCORE_DONT_CLEAR(s) ((s) == SP_COUNTRY || (s) == SP_ACCURACY || (s) == SP_FPS || (s) == SP_FLAGS || (s) == SP_QUEUE)

///////////////////////////
// sound constants

// this assignment must match menu/nexuiz/dialog_settings_misc.c!
const CHAN_AUTO = 0;
 // on world: announcers, ...                     INFO
 // on players: item pickup                       ITEMS
 // on entities: UNUSED
 // on csqc: UNUSED
const CHAN_WEAPON = 1; // Weapon fire
 // on world: UNUSED
 // on players: weapon firing                     WEAPONS
 // on entities: turret firing                    WEAPONS
 // on csqc: UNUSED
const CHAN_VOICE = 2; // Voice/Radio
 // on world: UNUSED
 // on players: voice                             VOICE
 // on entities: ambient                          AMBIENT
 // on csqc: UNUSED
const CHAN_TRIGGER = 3; // Triggers/Items
 // on world: UNUSED
 // on players: item pickup                       ITEMS
 // on entities: platforms moving etc.            ITEMS
 // on csqc: UNUSED
const CHAN_PROJECTILE = 4; // Projectiles
 // on world: UNUSED
 // on players: projectiles hitting player        SHOTS
 // on entities: projectiles                      SHOTS
 // on csqc: projectile sounds                    SHOTS
const CHAN_WEAPON2 = 5; // Nex fire (separated as it is a very long sound)
 // on world: UNUSED
 // on players: weapon firing                     WEAPONS
 // on entities: turret firing                    WEAPONS
 // on csqc: UNUSED
const CHAN_PAIN = 6; // Pain
 // on world: UNUSED
 // on players: pain                              PAIN
 // on entities: projectiles flying               SHOTS
 // on csqc: player pain                          PAIN
const CHAN_PLAYER = 7; // Player body
 // on world: UNUSED
 // on players: player sounds                     PLAYER
 // on entities: player sounds                    PLAYER
 // on csqc: UNUSED

const ATTN_NONE = 0;
const ATTN_MIN = 0.015625;
const ATTN_NORM = 0.5;
const ATTN_IDLE = 2;
const ATTN_STATIC = 3;
const ATTN_MAX = 3.984375;

const VOL_BASE = 0.7;
const VOL_BASEVOICE = 1.0;

const SPECIES_HUMAN        =  0;
const SPECIES_ROBOT_SOLID  =  1;
const SPECIES_ALIEN        =  2;
const SPECIES_ANIMAL       =  3;
const SPECIES_ROBOT_RUSTY  =  4;
const SPECIES_ROBOT_SHINY  =  5;
const SPECIES_RESERVED     = 15;

///////////////////////////
// damage constants

enum {
    // start environmental
    DEATH_FALL = 10000,
    DEATH_DROWN,
    DEATH_HURTTRIGGER,
    DEATH_LAVA,
    DEATH_SLIME,
    DEATH_SWAMP,
    // end environmental
    DEATH_GUARANTEED,
    DEATH_TELEFRAG,
    DEATH_KILL,
    DEATH_NOAMMO,
    DEATH_TEAMCHANGE,
    DEATH_AUTOTEAMCHANGE,
    DEATH_CAMP,
    DEATH_SHOOTING_STAR,
    DEATH_ROT,
    DEATH_MIRRORDAMAGE,
    DEATH_TOUCHEXPLODE,
    DEATH_CHEAT,
    DEATH_FIRE,
    DEATH_TURRET,
    DEATH_NOISE,
    DEATH_ARC,
    DEATH_IGNITE,
    DEATH_LINKER_SHARE,
    DEATH_VAMPIRE,
    DEATH_ITEM,
    DEATH_MEODP,
    DEATH_HOOKFRAG,
    DEATH_ENDURANCE,
    DEATH_RESOURCE_ARMOR,
    DEATH_CONDUIT,
};

const DEATH_SPECIAL_START = DEATH_FALL;
const DEATH_ENV_START = DEATH_FALL;
const DEATH_ENV_END = DEATH_SWAMP;

const DEATH_WEAPONMASK = 0xFF;
const DEATH_HITTYPEMASK = 0x1F00; // which is WAY below 10000 used for normal deaths
const HITTYPE_SECONDARY = 0x100;
const HITTYPE_SPLASH = 0x200;
const HITTYPE_BOUNCE = 0x400;
const HITTYPE_HEADSHOT = 0x800;
const HITTYPE_VISUAL_FLIPSECONDARY = 0x1000;

// macros to access these
#define DEATH_ISSPECIAL(t)            ((t) >= DEATH_SPECIAL_START)
#define DEATH_HGTYPE(t)               ((t) & DEATH_WEAPONMASK)
#define DEATH_ISHG(t)                 (DEATH_HGTYPE(t) >= HG_START && DEATH_HGTYPE(t) <= HG_END)
#define DEATH_WEAPONOFWEAPONDEATH(t)  (if(DEATH_ISSPECIAL(t)) -1 else ((t) & DEATH_WEAPONMASK))
#define DEATH_ISWEAPON(t,w)           (!DEATH_ISSPECIAL(t) && DEATH_WEAPONOFWEAPONDEATH(t) == (w))
#define DEATH_WEAPONOF(t)             (if(DEATH_ISHG(t) || DEATH_ISSPECIAL(t)) 0 else DEATH_WEAPONOFWEAPONDEATH(t))
#define DEATH_ISPROJECTED(t)          ((t) == DEATH_ARC || (t) == DEATH_IGNITE || (t) == DEATH_ENDURANCE)
#define DEATH_ISENVIRONMENTAL(t)      ((t) >= DEATH_ENV_START && (t) <= DEATH_ENV_END)
#define WEP_VALID(w)                  ((w) >= WEP_FIRST && (w) <= WEP_LAST)


///////////////////////////
// movetypes (must much the engine defs)

const   MOVETYPE_NONE               = 0;    /// never moves
const   MOVETYPE_ANGLENOCLIP        = 1;
const   MOVETYPE_ANGLECLIP          = 2;
const   MOVETYPE_WALK               = 3;    /// gravity
const   MOVETYPE_STEP               = 4;    /// gravity, special edge handling
const   MOVETYPE_FLY                = 5;
const   MOVETYPE_TOSS               = 6;    /// gravity
const   MOVETYPE_PUSH               = 7;    /// no clip to world, push and crush
const   MOVETYPE_NOCLIP             = 8;
const   MOVETYPE_FLYMISSILE         = 9;    /// extra size to monsters (?)
const   MOVETYPE_BOUNCE             = 10;
const   MOVETYPE_BOUNCEMISSILE      = 11;   /// bounce w/o gravity
const   MOVETYPE_FOLLOW             = 12;   /// track movement of aiment
const   MOVETYPE_FAKEPUSH           = 13;   /// tenebrae's push that doesn't push
const   MOVETYPE_PHYSICS            = 32;   /// indicates this object is physics controlled
const   MOVETYPE_FLY_WORLDONLY      = 33;   /// like MOVETYPE_FLY, but uses MOVE_WORLDONLY for all its traces; objects of this movetype better be SOLID_NOT or SOLID_TRIGGER please, or else...


///////////////////////////
// misc constants

const FRAGS_PLAYER = 0;
const FRAGS_SPECTATOR = -666;
const FRAGS_LMS_LOSER = -616;
const FRAGS_PLAYER_NONSOLID = -616;

enum {
    WATERLEVEL_NONE,
    WATERLEVEL_WETFEET,
    WATERLEVEL_SWIMMING,
    WATERLEVEL_SUBMERGED,
};

const MAX_SHOT_DISTANCE = 32768;

#define RM_SOUND_LASER_PRIMARY "weapons/rm_laser1.wav"
#define RM_SOUND_LASER_SECONDARY "weapons/rm_laser2.wav"
#define RM_SOUND_MORNINGRESCUE "misc/morningrescue.wav"
#define RM_SOUND_MINSTA (if(cvar("sv_oldnexsound")) "weapons/minstanexfire.wav" else "weapons/rm_minsta.wav")
#define RM_SOUND_KILL "misc/kill.wav"
#define RM_SOUND_PHOENIX "misc/poweroff.wav"
#define RM_SOUND_REBIRTH "misc/poweroff.wav"
#define RM_SOUND_RECOVERY "misc/poweroff.wav"

// TODO: cvars for these
#define SHOWNAMES_ALPHA 0.9
#define SHOWNAMES_MAXDISTANCE 2500
#define SHOWNAMES_MINDISTANCE 1000
#define SHOWNAMES_FONTSIZE 10
#define SHOWNAMES_ASPECT 8
#define SHOWNAMES_HEIGHT 15
#define SHOWNAMES_ORIGIN_OFFSET '0 0 64'

#ifndef MENUQC
const vector eX = '1 0 0';
const vector eY = '0 1 0';
const vector eZ = '0 0 1';
#endif

#define abs(f) fabs(f)

const M_PI = 3.14159265358979323846;

const CVAR_TYPEFLAG_EXISTS = 1;
const CVAR_TYPEFLAG_SAVED = 2;
const CVAR_TYPEFLAG_PRIVATE = 4;
const CVAR_TYPEFLAG_ENGINE = 8;
const CVAR_TYPEFLAG_HASDESCRIPTION = 16;
const CVAR_TYPEFLAG_READONLY = 32;
const CVAR_TYPEFLAG_MODIFIED = 64;
const CVAR_TYPEFLAG_WATCHED = 128;

#ifndef RM_MAXCLIENTS
#define RM_MAXCLIENTS 32
#endif

const BUFFMODEL_OVERHEAD_OFFSET = '0 0 70';
